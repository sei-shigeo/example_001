// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vehicles.sql

package db

import (
	"context"
)

const CreateVehicle = `-- name: CreateVehicle :one
INSERT INTO vehicles (number)
VALUES ($1)
RETURNING id, number, is_active, deleted_at, created_at, updated_at
`

func (q *Queries) CreateVehicle(ctx context.Context, number string) (*Vehicle, error) {
	row := q.db.QueryRow(ctx, CreateVehicle, number)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteVehicle = `-- name: DeleteVehicle :exec
DELETE FROM vehicles
WHERE id = $1
`

func (q *Queries) DeleteVehicle(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteVehicle, id)
	return err
}

const GetVehicleByID = `-- name: GetVehicleByID :one
SELECT id, number, is_active, deleted_at, created_at, updated_at FROM vehicles
WHERE id = $1
`

func (q *Queries) GetVehicleByID(ctx context.Context, id int32) (*Vehicle, error) {
	row := q.db.QueryRow(ctx, GetVehicleByID, id)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetVehicles = `-- name: GetVehicles :many
SELECT id, number, is_active, deleted_at, created_at, updated_at FROM vehicles
ORDER BY id
`

func (q *Queries) GetVehicles(ctx context.Context) ([]*Vehicle, error) {
	rows, err := q.db.Query(ctx, GetVehicles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Vehicle{}
	for rows.Next() {
		var i Vehicle
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.IsActive,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateVehicle = `-- name: UpdateVehicle :one
UPDATE vehicles
SET number = $2
WHERE id = $1
RETURNING id, number, is_active, deleted_at, created_at, updated_at
`

type UpdateVehicleParams struct {
	ID     int32  `json:"id"`
	Number string `json:"number"`
}

func (q *Queries) UpdateVehicle(ctx context.Context, arg *UpdateVehicleParams) (*Vehicle, error) {
	row := q.db.QueryRow(ctx, UpdateVehicle, arg.ID, arg.Number)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
