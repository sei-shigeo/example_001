// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer.sql

package db

import (
	"context"
)

const CreateCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (name, email)
VALUES ($1, $2)
RETURNING id, name, email, is_active, deleted_at, created_at, updated_at
`

type CreateCustomerParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg *CreateCustomerParams) (*Customer, error) {
	row := q.db.QueryRow(ctx, CreateCustomer, arg.Name, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteCustomer, id)
	return err
}

const GetCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, email, is_active, deleted_at, created_at, updated_at FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int32) (*Customer, error) {
	row := q.db.QueryRow(ctx, GetCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetCustomers = `-- name: GetCustomers :many
SELECT id, name, email, is_active, deleted_at, created_at, updated_at FROM customers
ORDER BY id
`

func (q *Queries) GetCustomers(ctx context.Context) ([]*Customer, error) {
	rows, err := q.db.Query(ctx, GetCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.IsActive,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET name = $2, email = $3
WHERE id = $1
RETURNING id, name, email, is_active, deleted_at, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg *UpdateCustomerParams) (*Customer, error) {
	row := q.db.QueryRow(ctx, UpdateCustomer, arg.ID, arg.Name, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
