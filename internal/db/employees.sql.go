// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: employees.sql

package db

import (
	"context"
)

const CreateEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (name, email)
VALUES ($1, $2)
RETURNING id, name, email, phone, is_active, deleted_at, created_at, updated_at
`

type CreateEmployeeParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg *CreateEmployeeParams) (*Employee, error) {
	row := q.db.QueryRow(ctx, CreateEmployee, arg.Name, arg.Email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteEmployee, id)
	return err
}

const GetEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, name, email, phone, is_active, deleted_at, created_at, updated_at FROM employees
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id int32) (*Employee, error) {
	row := q.db.QueryRow(ctx, GetEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetEmployees = `-- name: GetEmployees :many
SELECT id, name, email, phone, is_active, deleted_at, created_at, updated_at FROM employees
ORDER BY id
`

func (q *Queries) GetEmployees(ctx context.Context) ([]*Employee, error) {
	rows, err := q.db.Query(ctx, GetEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.IsActive,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET name = $2, email = $3
WHERE id = $1
RETURNING id, name, email, phone, is_active, deleted_at, created_at, updated_at
`

type UpdateEmployeeParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg *UpdateEmployeeParams) (*Employee, error) {
	row := q.db.QueryRow(ctx, UpdateEmployee, arg.ID, arg.Name, arg.Email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
