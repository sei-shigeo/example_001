package components

type LabelProps struct {
	For             string
	Label           string
	Required        bool
	AriaDescribedby string
	ErrorBind       string
}

templ Label(p LabelProps) {
	<label for={ p.For } class="flex gap-1 items-center">
		if p.Required {
			<span class="text-red-500 align-middle">*</span>
		}
		<span>{ p.Label }</span>
		<span
			id={ p.AriaDescribedby }
			class="text-red-500 text-xs"
			if p.ErrorBind !="" {
				data-text={ p.ErrorBind }
			}
		></span>
	</label>
}

type InputProps struct {
	ID              string
	Placeholder     string
	Type            string // デフォルト: "text"
	Class           string
	Bind            string
	ValidatePath    string
	AriaDescribedby string
	Required        bool // デフォルト: true
	Attrs           templ.Attributes
}

func (p InputProps) WithDefaults() InputProps {
	if p.Type == "" {
		p.Type = "text"
	}
	if p.Class == "" {
		p.Class = "bg-white border border-gray-300 rounded-md py-1.5 px-2 w-full"
	}
	if p.Placeholder == "" {
		p.Placeholder = "入力してください"
	}

	if p.AriaDescribedby == "" {
		p.AriaDescribedby = "editError" + p.ID
	}
	return p
}

templ Input(p InputProps) {
	<input
		id={ p.ID }
		placeholder={ p.Placeholder }
		type={ p.Type }
		class={ p.Class }
		if p.Required {
			required
		}
		if p.Bind != "" {
			data-bind={ p.Bind }
		}
		if p.ValidatePath != "" {
			data-on-keydown__debounce.500ms={ p.ValidatePath }
		}
		if p.AriaDescribedby != "" {
			aria-describedby={ p.AriaDescribedby }
		}
		{ p.Attrs... }
	/>
}

type InputLabelProps struct {
	Input InputProps
	Label LabelProps
}

templ InputLabel(p InputLabelProps) {
	<div class="flex flex-col gap-1">
		@Label(LabelProps{
			For:             p.Input.ID,
			Label:           p.Label.Label,
			Required:        p.Input.Required,
			AriaDescribedby: p.Input.AriaDescribedby,
			ErrorBind:       p.Label.ErrorBind,
		})
		@Input(p.Input.WithDefaults())
	</div>
}
