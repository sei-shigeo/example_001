package components

type EditFormProps struct {
	CloseAction string // 閉じるボタンのアクション
	SaveAction  string // 保存ボタンのアクション
	Disabled    string // 保存ボタンのdisabled条件
}

type FieldProps struct {
	ID              string
	Label           string
	Type            string // デフォルト: "text"
	Placeholder     string // デフォルト: Labelと同じ
	Bind            string
	ValidatePath    string
	ErrorBind       string
	AriaDescribedby string
	Required        bool // デフォルト: true
}

// WithDefaults はFieldPropsにデフォルト値を適用
func (f FieldProps) WithDefaults() FieldProps {
	if f.Type == "" {
		f.Type = "text"
	}
	if f.AriaDescribedby == "" {
		f.AriaDescribedby = "editError" + f.ID
	}
	if f.Placeholder == "" {
		f.Placeholder = f.Label
	}
	// Requiredのデフォルトは設定しない（明示的に設定してもらう）
	return f
}

templ EditForm(p EditFormProps) {
	<div class="grid gap-4">
		<div>
			@Button(ButtonProps{
				Action: p.CloseAction,
				Label:  "閉じる",
			}.WithDefaults())
		</div>
		<div>
			{ children... }
		</div>
		<div>
			@Button(ButtonProps{
				Action: p.SaveAction,
				Label:  "保存",
				Disabled: p.Disabled,
			}.WithDefaults())
		</div>
	</div>
}

templ EditFormField(f FieldProps) {
	{{ id := "edit" + f.ID }}
	@Label(LabelProps{
		For:             id,
		Label:           f.Label,
		Required:        f.Required,
		AriaDescribedby: f.AriaDescribedby,
		ErrorBind:       f.ErrorBind,
	})
	// <input
	// 	id={ id }
	// 	placeholder={ f.Placeholder }
	// 	if f.Required {
	// 		required
	// 	}
	// 	aria-live="polite"
	// 	aria-describedby={ f.AriaDescribedby }
	// 	class="bg-gray-100 rounded-md p-1 border focus:outline-none focus:ring-1 focus:ring-primary"
	// 	type={ f.Type }
	// 	data-bind={ f.Bind }
	// 	if f.ValidatePath != "" {
	// 		data-on-keydown__debounce.500ms={ f.ValidatePath }
	// 	}
	// />
	@Input(InputProps{
		ID:              id,
		Placeholder:     f.Placeholder,
		Type:            f.Type,
		Bind:            f.Bind,
		ValidatePath:    f.ValidatePath,
		AriaDescribedby: f.AriaDescribedby,
		Required:        f.Required,
	}.WithDefaults())
}

templ CleateForm() {
	@EditForm(EditFormProps{
		CloseAction: "closeForm",
		SaveAction:  "saveForm",
		Disabled:    "isSaving || !isValid",
	}) {
		@EditFormField(FieldProps{
			ID:        "Name",
			Label:     "名前",
			Bind:      "formData.name",
			ErrorBind: "errors.name",
			Required:  true,
		}.WithDefaults())
		@EditFormField(FieldProps{
			ID:        "Email",
			Label:     "メールアドレス",
			Type:      "email",
			Bind:      "formData.email",
			ErrorBind: "errors.email",
			Required:  true,
		}.WithDefaults())
		@EditFormField(FieldProps{
			ID:        "Age",
			Label:     "年齢",
			Type:      "number",
			Bind:      "formData.age",
			ErrorBind: "errors.age",
			Required:  false,
		}.WithDefaults())
	}
}
