package components

type EditFormProps struct {
	CloseAction string // 閉じるボタンのアクション
	SaveAction  string // 保存ボタンのアクション
	// Fields      FieldProps // 単数形になってる
}

type FieldProps struct {
	ID              string
	Label           string
	Type            string // デフォルト: "text"
	Placeholder     string // デフォルト: Labelと同じ
	Bind            string
	ValidatePath    string
	ErrorBind       string
	AriaDescribedby string
	Required        bool // デフォルト: true
}

// WithDefaults はFieldPropsにデフォルト値を適用
func (f FieldProps) WithDefaults() FieldProps {
	if f.Type == "" {
		f.Type = "text"
	}
	if f.AriaDescribedby == "" {
		f.AriaDescribedby = "editError" + f.ID
	}
	if f.Placeholder == "" {
		f.Placeholder = f.Label
	}
	if f.ID == "" {
		f.ID = "edit" + f.ID
	}
	// Requiredのデフォルトは設定しない（明示的に設定してもらう）
	return f
}

templ EditForm(p EditFormProps) {
	<div class="grid gap-4">
		<div>
			@Button(ButtonProps{
				Action: p.CloseAction,
				Label:  "閉じる",
			}.WithDefaults())
		</div>
		<div>
			{ children... }
		</div>
		<div>
			@Button(ButtonProps{
				Action: p.SaveAction,
				Label:  "保存",
			}.WithDefaults())
		</div>
	</div>
}

templ EditFormField(f FieldProps) {
	{{ id := "edit" + f.ID }}
	<label for={ id } class="grid gap-1">
		if f.Required {
			<span class="text-red-500 align-middle">*</span>
		}
		<span>{ f.Label }</span>
		<span id={ f.AriaDescribedby } class="text-red-500 text-xs" data-text={ f.ErrorBind }></span>
	</label>
	<input
		id={ id }
		placeholder={ f.Placeholder }
		if f.Required {
			required
		}
		aria-live="polite"
		aria-describedby={ f.AriaDescribedby }
		class="bg-gray-100 rounded-md p-1 border focus:outline-none focus:ring-1 focus:ring-primary"
		type={ f.Type }
		data-bind={ f.Bind }
		if f.ValidatePath != "" {
			data-on-keydown__debounce.500ms={ f.ValidatePath }
		}
	/>
}

