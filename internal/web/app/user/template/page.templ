package template

import (
	"fmt"
	"project/internal/db"
	"project/internal/web/layouts"

	"project/internal/components/templui/button"
	"project/internal/components/templui/card"
	"project/internal/components/templui/input"
	"project/internal/components/templui/label"
	"project/internal/components/templui/selectbox"
)

templ CardDefault() {
	<div class="w-full max-w-sm">
		@card.Card() {
			@card.Header() {
				@card.Title() {
					Create Project
				}
				@card.Description() {
					Deploy your new project in one-click.
				}
			}
			@card.Content() {
				<div class="flex flex-col gap-4">
					<div class="w-full max-w-sm grid gap-2">
						@label.Label(label.Props{
							For: "name",
						}) {
							Name
						}
						@input.Input(input.Props{
							ID:          "name",
							Placeholder: "Enter project name",
						})
					</div>
					<div class="w-full max-w-sm grid gap-2">
						@label.Label(label.Props{
							For: "service",
						}) {
							Service
						}
						@selectbox.SelectBox() {
							@selectbox.Trigger(selectbox.TriggerProps{
								ID: "service",
							}) {
								@selectbox.Value(selectbox.ValueProps{
									Placeholder: "Select",
								})
							}
							@selectbox.Content() {
								@selectbox.Group() {
									@selectbox.Item(selectbox.ItemProps{
										Value: "postgres",
									}) {
										PostgreSQL
									}
									@selectbox.Item(selectbox.ItemProps{
										Value: "mysql",
									}) {
										MySQL
									}
									@selectbox.Item(selectbox.ItemProps{
										Value: "sqlite",
									}) {
										SQLite
									}
								}
							}
						}
					</div>
				</div>
			}
			@card.Footer(card.FooterProps{
				Class: "flex justify-between",
			}) {
				@button.Button(button.Props{
					Variant: button.VariantSecondary,
				}) {
					Cancel
				}
				@button.Button() {
					Deploy
				}
			}
		}
	</div>
}

templ EmployeesPage(employees []*db.Employee) {
	@layouts.AppLayout("Employees") {
		<div class="container mx-auto px-4 py-8 flex gap-4">
			@CardDefault()
			@CardDefault()
		</div>
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold text-indigo-500 mb-8 border-b pb-4">従業員一覧</h1>
			<h1 class="text-3xl font-bold text-amber-500 mb-8 border-b pb-4">従業員一覧</h1>
			<h1 class="text-3xl font-bold text-green-500 mb-8 border-b pb-4">従業員一覧</h1>
			<div class="bg-white shadow-md rounded-lg overflow-hidden">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">名前</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">メールアドレス</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ステータス</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">作成日</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, employee := range employees {
							<tr>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									{ fmt.Sprintf("%d", employee.ID) }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									{ employee.Name }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{ employee.Email }
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									if employee.IsActive {
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
											アクティブ
										</span>
									} else {
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
											非アクティブ
										</span>
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									if employee.CreatedAt.Valid {
										{ employee.CreatedAt.Time.Format("2006-01-02 15:04:05") }
									} else {
										-
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									<a href="/employees/{ employee.ID }" class="text-blue-500 hover:text-blue-700">詳細</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
				if len(employees) == 0 {
					<div class="text-center py-8">
						<p class="text-gray-500">従業員データがありません</p>
					</div>
				}
			</div>
		</div>
	}
}

templ LoginPage() {
	<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
		<div class="max-w-md w-full space-y-8">
			<div>
				<h2 class="mt-6 text-center text-3xl font-extrabold text-red-500">
					ログイン
				</h2>
			</div>
			<form class="mt-8 space-y-6">
				<div>
					<label for="email" class="sr-only">メールアドレス</label>
					<input id="email" name="email" type="email" required class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="メールアドレス"/>
				</div>
				<div>
					<label for="password" class="sr-only">パスワード</label>
					<input id="password" name="password" type="password" required class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="パスワード"/>
				</div>
				<div>
					<button type="submit" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
						ログイン
					</button>
				</div>
			</form>
		</div>
	</div>
}
